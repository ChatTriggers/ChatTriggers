buildscript {
    def f = file("gradle/mcversion.txt")

    project.ext.mcVersion = f.exists() ? f.readLines().first() as int : 10809
    ext.kotlin_version = "1.3.70"
    ext.dokka_version = "0.10.1"
    ext.json_docs_version = "2.0.8"

    repositories {
        jcenter()
        mavenLocal()
        mavenCentral()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
        maven {
            name = "sponge"
            url = "https://repo.spongepowered.org/maven"
        }
        maven {
            url "https://plugins.gradle.org/m2/"
        }
        flatDir dirs: 'libs'
    }

    dependencies {
        classpath "net.minecraftforge.gradle:ForgeGradle:" + (
                mcVersion >= 11200 ? '2.3-SNAPSHOT' :
                mcVersion >= 10904 ? '2.2-SNAPSHOT' :
                mcVersion >= 10809 ? "2.1-SNAPSHOT" :
                                     "invalid"
        )
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "org.jetbrains.dokka:dokka-gradle-plugin:0.10.1"
        classpath ':proguard:'
    }
}
apply plugin: 'net.minecraftforge.gradle.forge'
apply plugin: 'kotlin'
apply plugin: 'org.jetbrains.dokka'

version = "1.3.0-" + (
    mcVersion.toString().substring(0, 1) + "."
    + mcVersion.toString().substring(1, 3).replace("0", "") + "."
    + mcVersion.toString().substring(3, 5).replace("0", "")
)
group = "com.chattriggers.ctjs" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "ctjs"

apply plugin: "java"

sourceCompatibility = targetCompatibility = 1.8

configurations {
    provided
    // Make compile extend from our provided configuration so that things added to bundled end up on the compile classpath
    compile.extendsFrom(provided)
}

minecraft {
    version = [
            11202: '1.12.2-14.23.0.2486',
            11201: '1.12.1-14.22.0.2444',
            11200: '1.12-14.21.1.2387',
            11102: '1.11.2-13.20.0.2216',
            11100: '1.11-13.19.1.2188',
            11002: '1.10.2-12.18.2.2099',
            10904: '1.9.4-12.17.0.1976',
            10809: '1.8.9-11.15.1.1722'
    ][mcVersion]
    mappings = [
            11202: "snapshot_20170615",
            11201: "snapshot_20170615",
            11200: "snapshot_20170615",
            11102: "snapshot_20161220",
            11100: "snapshot_20161111",
            11002: "snapshot_20160518",
            10904: "snapshot_20160518",
            10809: "stable_22"
    ][mcVersion]

    runDir = "run"

    makeObfSourceJar = true

    // automatically apply jvm arg when running genIntellijRuns
    clientJvmArgs += ["-Dfml.coreMods.load=com.chattriggers.ctjs.launch.plugin.CTJSLoadingPlugin"]
}

afterEvaluate {
    tasks.sourceMainJava.replace '@MOD_VERSION@', project.version
    tasks.sourceMainJava.replace '@MC_VERSION@', "[ ${project.minecraft.version} ]"
}

repositories {
    mavenCentral()
    jcenter()
    maven {
        name = 'sponge'
        url = 'http://repo.spongepowered.org/maven'
    }
    maven {
        url = 'https://jitpack.io'
    }
    maven {
        url = "https://repo.sk1er.club/repository/maven-public"
    }
}

dependencies {
    provided "com.fasterxml.jackson.core:jackson-core:2.9.3"
    provided "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    provided "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"
    provided 'com.github.falsehonesty:asmhelper:1d4cc32e6a'
    provided 'com.chattriggers:rhino:1.8.1'
    provided 'com.fifesoft:rsyntaxtextarea:3.0.8'
    provided 'com.github.falsehonesty:ts-generator:adfb57a8f6'
}

jar {
    // Include all of the jars from the bundled configuration in our jar
    from configurations.provided.collect {
        exclude 'META-INF/LICENSE'
        exclude 'LICENSE.txt'
        exclude 'META-INF/LICENSE.txt'
        it.isDirectory() ? it : zipTree(it)
    }

    manifest.attributes(
            "FMLCorePlugin": "com.chattriggers.ctjs.launch.plugin.CTJSLoadingPlugin",
            "FMLCorePluginContainsFMLMod": "true",
            "FMLAT": "ctjs_at.cfg"
    )
}

processResources {
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include "mcmod.info"

        // replace version and mcversion
        expand "version":project.version, "mcversion":project.minecraft.version
    }

    from(sourceSets.main.resources.srcDirs) {
        exclude "mcmod.info"
    }

    rename '(.+_at.cfg)', 'META-INF/$1'
}

task userdocs(type: org.jetbrains.dokka.gradle.DokkaTask) {
    description = "Generate the docs to be used by scripters, excludes internal classes"
    group = "documentation"

    outputFormat = "javadoc"
    outputDirectory = "$buildDir/javadoc"


    configuration {
        jdkVersion = 8

        for (def pkg : ["engine.langs", "engine.loader", "engine.module", "utils", "listeners", "loader", "launch", "commands", "minecraft.wrappers.objects.threading"]) {
            perPackageOption {
                prefix = "com.chattriggers.ctjs.$pkg"
                suppress = true
            }
        }
    }
}

apply from: 'preprocessor.gradle'

task changeMcVersion() {
    doLast {
        def version

        if (project.hasProperty("minecraftVersion")) {
            version = project.minecraftVersion
        } else {
            version = 10809
            println "Defaulting to version 1.8.9..."
        }

        project.ext.mcVersion = version
        def f = file("gradle/mcversion.txt")
        f.delete()
        f.createNewFile()
        f.write(version.toString())

        println "MC target version is $version"
        def vars = [MC: version as int]
        project.convertTree(vars, 'src/main/java')
        project.convertTree(vars, 'src/main/kotlin')
        project.convertTree(vars, 'src/main/resources')
    }
}


task proguard(type: proguard.gradle.ProGuardTask) {
    configuration 'configuration.pro'

    // dontobfuscate()

    libraryjars files(configurations.runtimeClasspath.collect())

    injars "build/libs/ctjs-${version}.jar"
    outjars "build/libs/ctjs-${version}-RELEASE.jar"
}

proguard.dependsOn build