
// For those who want the bleeding edge
buildscript {
    def f = file("gradle/mcversion.txt")

    project.ext.mcVersion = f.exists() ? f.readLines().first() as int : 10809
    ext.kotlin_version = "1.2.60"

    repositories {
        jcenter()
        mavenLocal()
        mavenCentral()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
        maven {
            name = "sponge"
            url = "https://repo.spongepowered.org/maven"
        }
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }

    dependencies {
        classpath "net.minecraftforge.gradle:ForgeGradle:" + (
                mcVersion >= 11200 ? '2.3-SNAPSHOT' :
                mcVersion >= 10904 ? '2.2-SNAPSHOT' :
                mcVersion >= 10809 ? "2.1-SNAPSHOT" :
                                     "invalid"
        )
        classpath 'org.spongepowered:mixingradle:0.6-SNAPSHOT'
//        classpath "io.franzbecker:gradle-lombok:1.10"
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "org.jetbrains.dokka:dokka-gradle-plugin:0.9.17"
    }
}
apply plugin: 'net.minecraftforge.gradle.forge'
apply plugin: 'org.spongepowered.mixin'
//apply plugin: "io.franzbecker.gradle-lombok"
apply plugin: 'kotlin'
apply plugin: 'org.jetbrains.dokka'

version = "0.17_pre2-SNAPSHOT-" + (
    mcVersion.toString().substring(0, 1) + "."
    + mcVersion.toString().substring(1, 3).replace("0", "") + "."
    + mcVersion.toString().substring(3, 5).replace("0", "")
)
group = "com.chattriggers.ctjs" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "ctjs"

apply plugin: "java"
compileJava {
    sourceCompatibility = "1.8"
    targetCompatibility = "1.8"
}

configurations {
    provided
    // Make compile extend from our provided configuration so that things added to bundled end up on the compile classpath
    compile.extendsFrom(provided)
}

minecraft {
    version = [
            11202: '1.12.2-14.23.0.2486',
            11201: '1.12.1-14.22.0.2444',
            11200: '1.12-14.21.1.2387',
            11102: '1.11.2-13.20.0.2216',
            11100: '1.11-13.19.1.2188',
            11002: '1.10.2-12.18.2.2099',
            10904: '1.9.4-12.17.0.1976',
            10809: '1.8.9-11.15.1.1722'
    ][mcVersion]
    mappings = [
            11202: "snapshot_20170615",
            11201: "snapshot_20170615",
            11200: "snapshot_20170615",
            11102: "snapshot_20161220",
            11100: "snapshot_20161111",
            11002: "snapshot_20160518",
            10904: "snapshot_20160518",
            10809: "stable_22"
    ][mcVersion]

    runDir = "run"

    makeObfSourceJar = true
    clientJvmArgs = ["--tweakClass", "com.chattriggers.ctjs.launch.CTJSTweaker"]
}

afterEvaluate {
    // Note cannot use minecraft.replace because that has already been forwarded to the task by FG by now
    tasks.sourceMainJava.replace '@MOD_VERSION@', project.version
    // Includes intentional whitespace to stop Forge from declaring the mod to be compatible with
    // a newer srg-compatible MC version (that may be using a different protocol version)
    tasks.sourceMainJava.replace '@MC_VERSION@', "[ ${project.minecraft.version} ]"
}

repositories {
    mavenCentral()
    maven {
        name = 'sponge'
        url = 'http://repo.spongepowered.org/maven'
    }
}

dependencies {
    provided ('org.spongepowered:mixin:0.7.5-SNAPSHOT') {
        exclude module: 'launchwrapper'
        exclude module: 'guava'
        exclude module: 'gson'
        exclude module: 'commons-io'
        exclude module: 'log4j-core'
    }

    // You should fork the repo, apply your modifications
    // and either use jitpack (simplest) or create your own maven repo for it
    provided files("libs/sentry.jar")
    provided group: "com.fasterxml.jackson.core", name: "jackson-core", version: "2.9.3"
    provided "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    provided "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"
    // you may put jars on which you depend on in ./libs
    // or you may define them like so..
    //compile "some.group:artifact:version:classifier"
    //compile "some.group:artifact:version"
      
    // real examples
    //compile 'com.mod-buildcraft:buildcraft:6.0.8:dev'  // adds buildcraft to the dev env
    //compile 'com.googlecode.efficient-java-matrix-library:ejml:0.24' // adds ejml to the dev env

    // the 'provided' configuration is for optional dependencies that exist at compile-time but might not at runtime.
    //provided 'com.mod-buildcraft:buildcraft:6.0.8:dev'

    // the deobf configurations:  'deobfCompile' and 'deobfProvided' are the same as the normal compile and provided,
    // except that these dependencies get remapped to your current MCP mappings
    //deobfCompile 'com.mod-buildcraft:buildcraft:6.0.8:dev'
    //deobfProvided 'com.mod-buildcraft:buildcraft:6.0.8:dev'

    // for more info...
    // http://www.gradle.org/docs/current/userguide/artifact_dependencies_tutorial.html
    // http://www.gradle.org/docs/current/userguide/dependency_management.html

}

jar {
    // Include all of the jars from the bundled configuration in our jar
    from configurations.provided.asFileTree.files.collect {
        zipTree(it)
    }

    manifest.attributes(
            'MixinConfigs': 'mixins.ctjs.json',
            'TweakOrder': '0',
            'TweakClass': 'com.chattriggers.ctjs.launch.CTJSTweaker'
    )

}

mixin {
    // Specify "notch" or "searge" here
    defaultObfuscationEnv searge
    add sourceSets.main, "mixins.ctjs.refmap.json"
}

processResources {
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include "mcmod.info"

        // replace version and mcversion
        expand "version":project.version, "mcversion":project.minecraft.version
    }

    from(sourceSets.main.resources.srcDirs) {
        exclude "mcmod.info"
    }
    rename '(.+_at.cfg)', 'META-INF/$1'
}

//
//
///*
// * Userdocs
// */
//
//import io.franzbecker.gradle.lombok.task.DelombokTask
//
//task delombok(type: DelombokTask, dependsOn: compileJava) {
//    description = "Delomboks source code in order to compile javadocs"
//    group = "Documentation"
//
//    ext.outputDir = file("$buildDir/src-delomboked")
//    sourceSets.main.java.srcDirs.each {
//        args(it, "-f", "pretty", "-d", outputDir)
//    }
//}

task userdocs(type: org.jetbrains.dokka.gradle.DokkaTask) {
    description = "Generate the docs to be used by scripters, excludes internal classes"
    group = "documentation"

    outputFormat = 'javadoc'
    outputDirectory = "$buildDir/javadoc"
    jdkVersion = 8

    classpath += configurations.compile
//    exclude "com/chattriggers/ctjs/commands/**.java"
//    exclude "com/chattriggers/ctjs/listeners/**.java"
//    exclude "com/chattriggers/ctjs/utils/*/**.java"
//    exclude "com/chattriggers/ctjs/*.java"
//    exclude "com/chattriggers/ctjs/triggers/TriggerType.java"
//    exclude "com/chattriggers/ctjs/modules/**.java"
//    exclude "com/chattriggers/ctjs/loader/**.java"
//    exclude "com/chattriggers/ctjs/handlers/GuiHandler.java"
//    exclude "com/chattriggers/ctjs/utils/*.java"
//    exclude "com/chattriggers/ctjs/minecraft/mixins/*.java"
//    exclude "com/chattriggers/ctjs/minecraft/imixins/*.java"
}

task copySrg(type: Copy, dependsOn: 'genSrgs') {
    from {project.tasks.genSrgs.mcpToSrg}
    into 'mappings'
}

compileJava.dependsOn copySrg

setupDecompWorkspace.dependsOn copySrg
setupDevWorkspace.dependsOn copySrg

apply from: 'preprocessor.gradle'

task changeMcVersion() {
    doLast {
        def version

        if (project.hasProperty("minecraftVersion")) {
            version = project.minecraftVersion
        } else {
            version = 10809
            println "Defaulting to version 1.8.9..."
        }

        project.ext.mcVersion = version
        def f = file("gradle/mcversion.txt")
        f.delete()
        f.createNewFile()
        f.write(version.toString())

        println "MC target version is $version"
        def vars = [MC: version as int]
        project.convertTree(vars, 'src/main/java')
        project.convertTree(vars, 'src/main/kotlin')
        project.convertTree(vars, 'src/main/resources')
    }
}