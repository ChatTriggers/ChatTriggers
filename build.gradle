
// For those who want the bleeding edge
buildscript {
    repositories {
        jcenter()
        mavenLocal()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
        maven {
            name = "sponge"
            url = "https://repo.spongepowered.org/maven"
        }
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }

    dependencies {
        classpath "net.minecraftforge.gradle:ForgeGradle:2.1-SNAPSHOT"
        classpath 'org.spongepowered:mixingradle:0.6-SNAPSHOT'
        classpath "io.franzbecker:gradle-lombok:1.10"
    }
}
apply plugin: 'net.minecraftforge.gradle.forge'
apply plugin: 'org.spongepowered.mixin'
apply plugin: "io.franzbecker.gradle-lombok"

version = "0.10.1-SNAPSHOT"
group = "com.chattriggers.ctjs" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "ctjs"

apply plugin: "java"
compileJava {
    sourceCompatibility = "1.8"
    targetCompatibility = "1.8"
}

configurations {
    provided
    // Make compile extend from our provided configuration so that things added to bundled end up on the compile classpath
    compile.extendsFrom(provided)
}


minecraft {
    version = "1.8.9-11.15.1.1722"
    runDir = "run"

    mappings = "stable_22"
    makeObfSourceJar = true
    clientJvmArgs = ["--tweakClass", "com.chattriggers.ctjs.launch.CTJSTweaker"]
}

repositories {
    mavenCentral()
    maven {
        name = 'sponge'
        url = 'http://repo.spongepowered.org/maven'
    }
}

dependencies {
    provided ('org.spongepowered:mixin:0.6.4-SNAPSHOT') {
        exclude module: 'launchwrapper'
        exclude module: 'guava'
        exclude module: 'gson'
        exclude module: 'commons-io'
        exclude module: 'log4j-core'
    }

    // You should fork the repo, apply your modifications
    // and either use jitpack (simplest) or create your own maven repo for it
    compile files("libs/nashorn.jar")
    provided files("libs/sentry.jar")
    provided group: "com.fasterxml.jackson.core", name: "jackson-core", version: "2.9.3"
    // you may put jars on which you depend on in ./libs
    // or you may define them like so..
    //compile "some.group:artifact:version:classifier"
    //compile "some.group:artifact:version"
      
    // real examples
    //compile 'com.mod-buildcraft:buildcraft:6.0.8:dev'  // adds buildcraft to the dev env
    //compile 'com.googlecode.efficient-java-matrix-library:ejml:0.24' // adds ejml to the dev env

    // the 'provided' configuration is for optional dependencies that exist at compile-time but might not at runtime.
    //provided 'com.mod-buildcraft:buildcraft:6.0.8:dev'

    // the deobf configurations:  'deobfCompile' and 'deobfProvided' are the same as the normal compile and provided,
    // except that these dependencies get remapped to your current MCP mappings
    //deobfCompile 'com.mod-buildcraft:buildcraft:6.0.8:dev'
    //deobfProvided 'com.mod-buildcraft:buildcraft:6.0.8:dev'

    // for more info...
    // http://www.gradle.org/docs/current/userguide/artifact_dependencies_tutorial.html
    // http://www.gradle.org/docs/current/userguide/dependency_management.html

}

jar {
    // Include all of the jars from the bundled configuration in our jar
    from configurations.provided.asFileTree.files.collect {
        zipTree(it)
    }

    manifest.attributes(
            'MixinConfigs': 'mixins.ctjs.json',
            'TweakOrder': '0',
            'TweakClass': 'com.chattriggers.ctjs.launch.CTJSTweaker'
    )

}

mixin {
    // Specify "notch" or "searge" here
    defaultObfuscationEnv searge
    add sourceSets.main, "mixins.ctjs.refmap.json"
}

processResources {
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include "mcmod.info"

        // replace version and mcversion
        expand "version":project.version, "mcversion":project.minecraft.version
    }

    from(sourceSets.main.resources.srcDirs) {
        exclude "mcmod.info"
    }
    rename '(.+_at.cfg)', 'META-INF/$1'
}

//
//
///*
// * Userdocs
// */
//
//import io.franzbecker.gradle.lombok.task.DelombokTask
//
//task delombok(type: DelombokTask, dependsOn: compileJava) {
//    description "Delomboks source code in order to compile javadocs"
//    group "Documentation"
//
//    ext.outputDir = file("$buildDir/src-delomboked")
//    sourceSets.main.java.srcDirs.each {
//        args(it, "-f", "pretty", "-d", outputDir)
//    }
//}

task userdocs(type: Javadoc) {
    description = "Generate the docs to be used by scripters, excludes internal classes"
    group = "documentation"

    setDependsOn(["delombok"])
    options.links("https://docs.oracle.com/javase/8/docs/api/")
    source = "$buildDir/src-delomboked"
    classpath += configurations.compile
    exclude "com/chattriggers/ctjs/commands/**.java"
    exclude "com/chattriggers/ctjs/listeners/**.java"
    exclude "com/chattriggers/ctjs/utils/*/**.java"
    exclude "com/chattriggers/ctjs/*.java"
    exclude "com/chattriggers/ctjs/triggers/TriggerType.java"
    exclude "com/chattriggers/ctjs/modules/**.java"
    exclude "com/chattriggers/ctjs/loader/**.java"
    exclude "com/chattriggers/ctjs/handlers/GuiHandler.java"
    exclude "com/chattriggers/ctjs/utils/*.java"
}